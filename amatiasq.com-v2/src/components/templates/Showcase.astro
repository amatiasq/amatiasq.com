---
import type { Showcaseable } from '../../content/_meta';
import type { ContentOf } from '../../internals/content';
import { t } from '../../internals/i18n';
import MarkdownPage from './MarkdownPage.astro';

interface Props {
  entry: ContentOf<Showcaseable>;
}

const { entry } = Astro.props;
const { data } = entry;
const { links } = data;

function array<T>(value: T | T[]): T[] {
  if (!value) return [];
  if (Array.isArray(value)) return value;
  return [value];
}
---

<MarkdownPage entry={entry}>
  <nav slot="article-meta">
    {
      links?.live ? (
        <a href={links.live} target="_blank" rel="noopener noreferrer"></a>
      ) : null
    }
    {
      links?.github && (
        <a href={links.github} target="_blank" rel="noopener noreferrer">
          <span class="icon-github" />
          <span class="sr-only">GitHub</span>
        </a>
      )
    }
    {
      array(links?.video).map((x) => (
        <a href={x} target="_blank" rel="noopener noreferrer">
          <span class="icon-github" />
          <span class="sr-only">GitHub</span>
        </a>
      ))
    }
    {
      links?.wikipedia ? (
        <a href={t(links.wikipedia)} target="_blank" rel="noopener noreferrer">
          <span class="icon-github" />
          <span class="sr-only">GitHub</span>
        </a>
      ) : null
    }
  </nav>
</MarkdownPage>
