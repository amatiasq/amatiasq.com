---
import { existsSync } from 'fs';
import { mkdir, readFile, unlink, writeFile } from 'fs/promises';

interface Props {
  src: string;
}

const CACHE_DIR = './cache/web-components/';
const DOM_STUB = `
    class HTMLElement {};
    const customElements = {define() {}};
`;

async function importWebComponent(url: string) {
  const cachePath = `${CACHE_DIR}/${url.replace(/\//g, '_')}`;

  if (existsSync(cachePath)) {
    try {
      const source = await readFile(cachePath, 'utf-8');
      return await evaluateComponent(source);
    } catch (e) {
      await unlink(cachePath);
    }
  }

  const request = await fetch(url);
  const source = await request.text();
  await mkdir(CACHE_DIR, { recursive: true });
  await writeFile(cachePath, source, 'utf-8');
  return evaluateComponent(source);
}

async function evaluateComponent(source: string) {
  const viteValidSource = `${DOM_STUB}\n${source}`;

  const module = await import(
    // This is an import to evaluate the source as a module
    /* @vite-ignore */
    `data:text/javascript;base64,${btoa(viteValidSource)}`
  );

  return { ...module, source };
}

const {
  source,
  tagName: TagName,
  template,
} = await importWebComponent(Astro.props.src);
---

<script type="module" defer set:html={source} />

<TagName>
  <template shadowrootmode="open" set:html={template}>
    <!-- don't fold me  -->
  </template>
</TagName>
